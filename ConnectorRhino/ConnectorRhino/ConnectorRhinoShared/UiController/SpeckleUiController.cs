using System;
using System.Linq;
using DesktopUI2.Models;
using System.Threading.Tasks;
using Speckle.Core.Api;
using Speckle.Core.Credentials;
using System.Runtime.InteropServices;
using DesktopUI2.ViewModels;
using System.Windows.Documents;
using SpeckleRhino.UiController.Views;
using System.Collections.Generic;
using SpeckleRhino.State;

namespace SpeckleRhino.UiController
{
  [ClassInterface(ClassInterfaceType.AutoDual)]
  [ComVisible(true)]
  public class SpeckleUiController
  {
    public Microsoft.Web.WebView2.Core.CoreWebView2 CoreWebView2 { get; set; }
    public List<IView> Views { get; }

    public SpeckleUiController()
    {
      this.Views = new List<IView>();
    }

    public void UpdateUI(AppState state)
    {
      foreach (IView view in this.Views)
      {
        view.UpdateView();
      }
    }

    /// <summary>
    /// Execute function called by UI.
    /// </summary>
    /// <param name="id"> Command owner id. </param>
    /// <param name="name"> Command name. </param>
    /// <param name="data"> Command data. </param>
    public async void Exec(string id, string name, object data)
    {
      // Find which view we will execute command.
      IView viewToCallCommand = this.Views.FirstOrDefault(view => view.Id.Equals(Guid.Parse(id)));

      if (viewToCallCommand != null)
      {
        // Find upcoming command on view.
        if (viewToCallCommand.Commands.TryGetValue(name, out Commands.ICommand value))
        {
          value.Execute(data);
        }
      }
      else
      {
        // TODO: Handle here logging errors.
        this.ExecuteScript("console.log", "Command not found in any view.");
      }
    }

    public async void SendStream()
    {
      try
      {
        ExecuteScript("show-notification", "Creating stream & sending...");

        string _fileName = SpeckleRhinoConnectorPlugin.Instance.Bindings.GetFileName();
        var _fileStream = await CreateStream();

        var filters = SpeckleRhinoConnectorPlugin.Instance.Bindings.GetSelectionFilters();
        var selection = SpeckleRhinoConnectorPlugin.Instance.Bindings.GetSelectedObjects();

        _fileStream.Filter = filters.First(o => o.Slug == "all");
        _fileStream.CommitMessage = "Sent everything from DUI3";

        _fileStream.BranchName = "main";

        // set settings
        if (_fileStream.Settings == null || _fileStream.Settings.Count == 0)
        {
          var settings = SpeckleRhinoConnectorPlugin.Instance.Bindings.GetSettings();
          _fileStream.Settings = settings;
        }
        var Id = await Task.Run(() => SpeckleRhinoConnectorPlugin.Instance.Bindings.SendStream(_fileStream, new ProgressViewModel()));

        //var link = $"{_fileStream.Client.ServerUrl}/streams/{Id}";
        ExecuteScript("show-notification", $"Sent everything!");
      }
      catch (Exception ex)
      {
        Serilog.Log.Error(ex, ex.Message);
        ExecuteScript("show-notification", "Error: " + ex.Message);
      }
    }

    private async Task<StreamState> CreateStream()
    {
      // get default account
      var account = AccountManager.GetDefaultAccount();
      var client = new Client(account);

      // create the stream
      string streamId = await client.StreamCreate(new StreamCreateInput { description = "Autogenerated Stream for QuickSend", name = "DUI3 Test Stream", isPublic = false });
      var newStream = await client.StreamGet(streamId);

      return new StreamState(account, newStream) { BranchName = "main" };
    }

    /// <summary>
    /// Sends an event to the UI, bound to the global EventBus.
    /// </summary>
    /// <param name="eventName">The event's name.</param>
    /// <param name="eventMessage">The event args, which will be serialised to a string.</param>
    public void ExecuteScript(string eventName, string eventMessage)
    {
      var script = string.Format("window.{0}({1})", eventName, eventMessage);
      this.CoreWebView2.ExecuteScriptAsync(script);
    }
  }
}
