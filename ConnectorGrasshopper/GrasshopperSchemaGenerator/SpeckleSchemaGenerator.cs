using System;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Objects;
using Speckle.Core.Kits;
using ConnectorGrasshopperUtils;

namespace SourceGenerator
{
  [Generator]
  public class SpeckleSchemaSourceCodeGenerator : ISourceGenerator
  {
    public void Execute(GeneratorExecutionContext context)
    {
     CSOUtils.ListAvailableTypes().ForEach(t =>
     {
       // Add the source code to the compilation
       var name = $"{t.Name}SchemaNode.g.cs";
       context.AddSource(name, BuildSource(t));
       var diagDesc = new DiagnosticDescriptor("SPKL001", "Schema Generator Log", "Generated file {0}", "Speckle",
         DiagnosticSeverity.Warning, true);
       context.ReportDiagnostic(Diagnostic.Create(diagDesc, null, name));
     });

    }

    public void Initialize(GeneratorInitializationContext context)
    {
#if DEBUG
      //SpinWait.SpinUntil(() => Debugger.IsAttached);
#endif
      var pt = new Objects.Geometry.Point(0, 0);
      Debug.WriteLine(pt);
    }

    static Guid ToGuid(string input)
    {
      var src = "secretPhraseToKeepItSomewhatRandom..." + input; 
      byte[] stringbytes = Encoding.UTF8.GetBytes(src);
      byte[] hashedBytes = new System.Security.Cryptography
          .SHA1CryptoServiceProvider()
       .ComputeHash(stringbytes);
      Array.Resize(ref hashedBytes, 16);
      return new Guid(hashedBytes);
    }

    private static string BuildSource(Type t)
    {
      var className = $"{t.Name}SchemaComponent";
      var c = CSOUtils.GetValidConstr(t).First();
      var info = c.GetCustomAttributes(typeof(SchemaInfo), false).First() as SchemaInfo;

      return $@"//<auto-generated/>
using System;
using System.Linq;
using Grasshopper.Kernel;
using ConnectorGrasshopperUtils;
using ConnectorGrasshopper;

namespace ConnectorGrasshopper.SchemaNodes.AutoGenerated {{
    public class {className}: CreateSchemaObjectBase {{
        {BuildStaticConstructor(className)}
        
        public {className}(): base(""{info.Name}"", ""{info.Name}"", ""{info.Description}"", ""{info.Category}"", ""{info.Subcategory}""){{}}
        
        internal static string internalCategory => ""Speckle 2 Autogenerated"";
        internal static Guid internalGuid => new Guid(""{ToGuid(className)}"");
        internal static GH_Exposure internalExposure => SpeckleGHSettings.GetTabVisibility(internalCategory)
          ? GH_Exposure.tertiary
          : GH_Exposure.hidden;

        public override GH_Exposure Exposure => internalExposure;
        public override Guid ComponentGuid => internalGuid;

        public override void AddedToDocument(GH_Document document){{
          SelectedConstructor = CSOUtils.FindConstructor(""{CSOUtils.MethodFullName(c)}"", ""{c.DeclaringType!.FullName}"");
          base.AddedToDocument(document);
        }}
  }}
}}
";
    }

    private static string BuildStaticConstructor(string name)
    {
      return $@"
        static {name}() {{
          SpeckleGHSettings.SettingsChanged += (_, args) =>
          {{
            if (!args.Key.StartsWith(""Speckle2:tabs."")) return;
            var proxy = Grasshopper.Instances.ComponentServer.ObjectProxies.FirstOrDefault(p => p.Guid == internalGuid);
            if (proxy == null) return;
            proxy.Exposure = internalExposure;
          }};
        }}";
    }
  }
}
