//<auto-generated/>
using System;
using System.Linq;
using Grasshopper.Kernel;
using ConnectorGrasshopperUtils;
using ConnectorGrasshopper;

namespace ConnectorGrasshopper.SchemaNodes.AutoGenerated {
    
    public class CSIDiaphragm_fadb268d_3079_764d_4934_40b464607cf1: CreateSchemaObjectBase {
        
        static CSIDiaphragm_fadb268d_3079_764d_4934_40b464607cf1() {
          SpeckleGHSettings.SettingsChanged += (_, args) =>
          {
            if (!args.Key.StartsWith("Speckle2:tabs.")) return;
            var proxy = Grasshopper.Instances.ComponentServer.ObjectProxies.FirstOrDefault(p => p.Guid == internalGuid);
            if (proxy == null) return;
            proxy.Exposure = internalExposure;
          };
        }
        
        public CSIDiaphragm_fadb268d_3079_764d_4934_40b464607cf1(): base("CSI Diaphragm", "CSI Diaphragm", "Create an CSI Diaphragm", "CSI", "Properties"){}
        
        internal static string internalCategory => "Speckle 2 Autogenerated";
        internal static Guid internalGuid => new Guid("fadb268d-3079-764d-4934-40b464607cf1");
        internal static GH_Exposure internalExposure => GH_Exposure.tertiary;

        public override GH_Exposure Exposure => internalExposure;
        public override Guid ComponentGuid => internalGuid;

        public override void AddedToDocument(GH_Document document){
          SelectedConstructor = CSOUtils.FindConstructor("Objects.Structural.CSI.Properties.CSIDiaphragm.ctor(System.String,System.Boolean)", "Objects.Structural.CSI.Properties.CSIDiaphragm");
          base.AddedToDocument(document);
        }
    }
    
    public class CSIDiaphragm_fadb268d_3079_764d_4934_40b464607cf1UpgraderObject: IGH_UpgradeObject
    {
        public IGH_DocumentObject Upgrade(IGH_DocumentObject target, GH_Document document)
        {
          var component = target as IGH_Component;
          if (component == null)
            return null;

          var upgradedComponent = GH_UpgradeUtil.SwapComponents(component, UpgradeTo);
          UpgradeUtils.SwapGroups(document, component, upgradedComponent);
          return upgradedComponent;
        }

        public DateTime Version => new DateTime(2023, 3, 1);

        public Guid UpgradeFrom => new Guid("3bf735fc-8a3f-9bf9-0020-44df85609062");
        public Guid UpgradeTo => new("fadb268d-3079-764d-4934-40b464607cf1");
    }

}
