//<auto-generated/>
using System;
using System.Linq;
using Grasshopper.Kernel;
using ConnectorGrasshopperUtils;
using ConnectorGrasshopper;

namespace ConnectorGrasshopper.SchemaNodes.AutoGenerated {
    
    public class ResultSetAll_9cf7e4ab_2d77_7c56_0f80_3eb69fc1a031: CreateSchemaObjectBase {
        
        static ResultSetAll_9cf7e4ab_2d77_7c56_0f80_3eb69fc1a031() {
          SpeckleGHSettings.SettingsChanged += (_, args) =>
          {
            if (!args.Key.StartsWith("Speckle2:tabs.")) return;
            var proxy = Grasshopper.Instances.ComponentServer.ObjectProxies.FirstOrDefault(p => p.Guid == internalGuid);
            if (proxy == null) return;
            proxy.Exposure = internalExposure;
          };
        }
        
        public ResultSetAll_9cf7e4ab_2d77_7c56_0f80_3eb69fc1a031(): base("ResultSetAll", "ResultSetAll", "Creates a Speckle result set object for 1d element, 2d element, 3d element global and nodal results", "Structural", "Results"){}
        
        internal static string internalCategory => "Speckle 2 Autogenerated";
        internal static Guid internalGuid => new Guid("9cf7e4ab-2d77-7c56-0f80-3eb69fc1a031");
        internal static GH_Exposure internalExposure => GH_Exposure.tertiary;

        public override GH_Exposure Exposure => internalExposure;
        public override Guid ComponentGuid => internalGuid;

        public override void AddedToDocument(GH_Document document){
          SelectedConstructor = CSOUtils.FindConstructor("Objects.Structural.Results.ResultSetAll.ctor(Objects.Structural.Results.ResultSet1D,Objects.Structural.Results.ResultSet2D,Objects.Structural.Results.ResultSet3D,Objects.Structural.Results.ResultGlobal,Objects.Structural.Results.ResultSetNode)", "Objects.Structural.Results.ResultSetAll");
          base.AddedToDocument(document);
        }
    }
    
    public class ResultSetAll_9cf7e4ab_2d77_7c56_0f80_3eb69fc1a031UpgraderObject: IGH_UpgradeObject
    {
        public IGH_DocumentObject Upgrade(IGH_DocumentObject target, GH_Document document)
        {
          var component = target as IGH_Component;
          if (component == null)
            return null;

          var upgradedComponent = GH_UpgradeUtil.SwapComponents(component, UpgradeTo);
          UpgradeUtils.SwapGroups(document, component, upgradedComponent);
          return upgradedComponent;
        }

        public DateTime Version => new DateTime(2023, 3, 1);

        public Guid UpgradeFrom => new Guid("f738dd64-daa6-643f-d440-b27f83cac9d4");
        public Guid UpgradeTo => new("9cf7e4ab-2d77-7c56-0f80-3eb69fc1a031");
    }

}
