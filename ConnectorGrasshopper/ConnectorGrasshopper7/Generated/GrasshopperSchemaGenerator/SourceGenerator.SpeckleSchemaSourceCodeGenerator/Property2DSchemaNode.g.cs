//<auto-generated/>
using System;
using System.Linq;
using Grasshopper.Kernel;
using ConnectorGrasshopperUtils;
using ConnectorGrasshopper;

namespace ConnectorGrasshopper.SchemaNodes.AutoGenerated {
    
    public class Property2D_07d7a0f1_7b29_42e6_78e9_acd034130fbf: CreateSchemaObjectBase {
        
        static Property2D_07d7a0f1_7b29_42e6_78e9_acd034130fbf() {
          SpeckleGHSettings.SettingsChanged += (_, args) =>
          {
            if (!args.Key.StartsWith("Speckle2:tabs.")) return;
            var proxy = Grasshopper.Instances.ComponentServer.ObjectProxies.FirstOrDefault(p => p.Guid == internalGuid);
            if (proxy == null) return;
            proxy.Exposure = internalExposure;
          };
        }
        
        public Property2D_07d7a0f1_7b29_42e6_78e9_acd034130fbf(): base("Property2D (by name)", "Property2D (by name)", "Creates a Speckle structural 2D element property", "Structural", "Properties"){}
        
        internal static string internalCategory => "Speckle 2 Autogenerated";
        internal static Guid internalGuid => new Guid("07d7a0f1-7b29-42e6-78e9-acd034130fbf");
        internal static GH_Exposure internalExposure => GH_Exposure.tertiary;

        public override GH_Exposure Exposure => internalExposure;
        public override Guid ComponentGuid => internalGuid;

        public override void AddedToDocument(GH_Document document){
          SelectedConstructor = CSOUtils.FindConstructor("Objects.Structural.Properties.Property2D.ctor(System.String)", "Objects.Structural.Properties.Property2D");
          base.AddedToDocument(document);
        }
    }

    public class Property2D_85f9711f_802f_8caa_8d77_4a1d3ae1aac2: CreateSchemaObjectBase {
        
        static Property2D_85f9711f_802f_8caa_8d77_4a1d3ae1aac2() {
          SpeckleGHSettings.SettingsChanged += (_, args) =>
          {
            if (!args.Key.StartsWith("Speckle2:tabs.")) return;
            var proxy = Grasshopper.Instances.ComponentServer.ObjectProxies.FirstOrDefault(p => p.Guid == internalGuid);
            if (proxy == null) return;
            proxy.Exposure = internalExposure;
          };
        }
        
        public Property2D_85f9711f_802f_8caa_8d77_4a1d3ae1aac2(): base("Property2D", "Property2D", "Creates a Speckle structural 2D element property", "Structural", "Properties"){}
        
        internal static string internalCategory => "Speckle 2 Autogenerated";
        internal static Guid internalGuid => new Guid("85f9711f-802f-8caa-8d77-4a1d3ae1aac2");
        internal static GH_Exposure internalExposure => GH_Exposure.tertiary;

        public override GH_Exposure Exposure => internalExposure;
        public override Guid ComponentGuid => internalGuid;

        public override void AddedToDocument(GH_Document document){
          SelectedConstructor = CSOUtils.FindConstructor("Objects.Structural.Properties.Property2D.ctor(System.String,Objects.Structural.Materials.StructuralMaterial,Objects.Structural.PropertyType2D,System.Double)", "Objects.Structural.Properties.Property2D");
          base.AddedToDocument(document);
        }
    }
    
    public class Property2D_07d7a0f1_7b29_42e6_78e9_acd034130fbfUpgraderObject: IGH_UpgradeObject
    {
        public IGH_DocumentObject Upgrade(IGH_DocumentObject target, GH_Document document)
        {
          var component = target as IGH_Component;
          if (component == null)
            return null;

          var upgradedComponent = GH_UpgradeUtil.SwapComponents(component, UpgradeTo);
          UpgradeUtils.SwapGroups(document, component, upgradedComponent);
          return upgradedComponent;
        }

        public DateTime Version => new DateTime(2023, 3, 1);

        public Guid UpgradeFrom => new Guid("239f30db-04f8-36ee-0af1-d8de4d5781d4");
        public Guid UpgradeTo => new("07d7a0f1-7b29-42e6-78e9-acd034130fbf");
    }


    public class Property2D_85f9711f_802f_8caa_8d77_4a1d3ae1aac2UpgraderObject: IGH_UpgradeObject
    {
        public IGH_DocumentObject Upgrade(IGH_DocumentObject target, GH_Document document)
        {
          var component = target as IGH_Component;
          if (component == null)
            return null;

          var upgradedComponent = GH_UpgradeUtil.SwapComponents(component, UpgradeTo);
          UpgradeUtils.SwapGroups(document, component, upgradedComponent);
          return upgradedComponent;
        }

        public DateTime Version => new DateTime(2023, 3, 1);

        public Guid UpgradeFrom => new Guid("fea17e08-f38d-108a-8a27-e2e2d2e09511");
        public Guid UpgradeTo => new("85f9711f-802f-8caa-8d77-4a1d3ae1aac2");
    }

}
