//<auto-generated/>
using System;
using System.Linq;
using Grasshopper.Kernel;
using ConnectorGrasshopperUtils;
using ConnectorGrasshopper;

namespace ConnectorGrasshopper.SchemaNodes.AutoGenerated {
    
    public class Space_b32ef901_36b8_a09a_76ed_9dcc3c30effc: CreateSchemaObjectBase {
        
        static Space_b32ef901_36b8_a09a_76ed_9dcc3c30effc() {
          SpeckleGHSettings.SettingsChanged += (_, args) =>
          {
            if (!args.Key.StartsWith("Speckle2:tabs.")) return;
            var proxy = Grasshopper.Instances.ComponentServer.ObjectProxies.FirstOrDefault(p => p.Guid == internalGuid);
            if (proxy == null) return;
            proxy.Exposure = internalExposure;
          };
        }
        
        public Space_b32ef901_36b8_a09a_76ed_9dcc3c30effc(): base("Space", "Space", "Creates a Speckle space", "BIM", "MEP"){}
        
        internal static string internalCategory => "Speckle 2 Autogenerated";
        internal static Guid internalGuid => new Guid("b32ef901-36b8-a09a-76ed-9dcc3c30effc");
        internal static GH_Exposure internalExposure => GH_Exposure.tertiary;

        public override GH_Exposure Exposure => internalExposure;
        public override Guid ComponentGuid => internalGuid;

        public override void AddedToDocument(GH_Document document){
          SelectedConstructor = CSOUtils.FindConstructor("Objects.BuiltElements.Space.ctor(System.String,System.String,Objects.Geometry.Point,Objects.BuiltElements.Level)", "Objects.BuiltElements.Space");
          base.AddedToDocument(document);
        }
    }

    public class Space_3e8dd93f_1de3_a4c3_100d_a1356646263c: CreateSchemaObjectBase {
        
        static Space_3e8dd93f_1de3_a4c3_100d_a1356646263c() {
          SpeckleGHSettings.SettingsChanged += (_, args) =>
          {
            if (!args.Key.StartsWith("Speckle2:tabs.")) return;
            var proxy = Grasshopper.Instances.ComponentServer.ObjectProxies.FirstOrDefault(p => p.Guid == internalGuid);
            if (proxy == null) return;
            proxy.Exposure = internalExposure;
          };
        }
        
        public Space_3e8dd93f_1de3_a4c3_100d_a1356646263c(): base("Space with top level and offset parameters", "Space with top level and offset parameters", "Creates a Speckle space with the specified top level and offsets", "BIM", "MEP"){}
        
        internal static string internalCategory => "Speckle 2 Autogenerated";
        internal static Guid internalGuid => new Guid("3e8dd93f-1de3-a4c3-100d-a1356646263c");
        internal static GH_Exposure internalExposure => GH_Exposure.tertiary;

        public override GH_Exposure Exposure => internalExposure;
        public override Guid ComponentGuid => internalGuid;

        public override void AddedToDocument(GH_Document document){
          SelectedConstructor = CSOUtils.FindConstructor("Objects.BuiltElements.Space.ctor(System.String,System.String,Objects.Geometry.Point,Objects.BuiltElements.Level,Objects.BuiltElements.Level,System.Double,System.Double)", "Objects.BuiltElements.Space");
          base.AddedToDocument(document);
        }
    }
    
    public class Space_b32ef901_36b8_a09a_76ed_9dcc3c30effcUpgraderObject: IGH_UpgradeObject
    {
        public IGH_DocumentObject Upgrade(IGH_DocumentObject target, GH_Document document)
        {
          var component = target as IGH_Component;
          if (component == null)
            return null;

          var upgradedComponent = GH_UpgradeUtil.SwapComponents(component, UpgradeTo);
          UpgradeUtils.SwapGroups(document, component, upgradedComponent);
          return upgradedComponent;
        }

        public DateTime Version => new DateTime(2023, 3, 1);

        public Guid UpgradeFrom => new Guid("5313f37b-3a8f-98cd-d222-8e0596d0a954");
        public Guid UpgradeTo => new("b32ef901-36b8-a09a-76ed-9dcc3c30effc");
    }


    public class Space_3e8dd93f_1de3_a4c3_100d_a1356646263cUpgraderObject: IGH_UpgradeObject
    {
        public IGH_DocumentObject Upgrade(IGH_DocumentObject target, GH_Document document)
        {
          var component = target as IGH_Component;
          if (component == null)
            return null;

          var upgradedComponent = GH_UpgradeUtil.SwapComponents(component, UpgradeTo);
          UpgradeUtils.SwapGroups(document, component, upgradedComponent);
          return upgradedComponent;
        }

        public DateTime Version => new DateTime(2023, 3, 1);

        public Guid UpgradeFrom => new Guid("c04f54e7-165a-72ad-979e-0b7e5c9ac0cc");
        public Guid UpgradeTo => new("3e8dd93f-1de3-a4c3-100d-a1356646263c");
    }

}
