//<auto-generated/>
using System;
using System.Linq;
using Grasshopper.Kernel;
using ConnectorGrasshopperUtils;
using ConnectorGrasshopper;

namespace ConnectorGrasshopper.SchemaNodes.AutoGenerated {
    
    public class RevitLevel_15a3720a_2792_5f89_963f_34869fd7ae10: CreateSchemaObjectBase {
        
        static RevitLevel_15a3720a_2792_5f89_963f_34869fd7ae10() {
          SpeckleGHSettings.SettingsChanged += (_, args) =>
          {
            if (!args.Key.StartsWith("Speckle2:tabs.")) return;
            var proxy = Grasshopper.Instances.ComponentServer.ObjectProxies.FirstOrDefault(p => p.Guid == internalGuid);
            if (proxy == null) return;
            proxy.Exposure = internalExposure;
          };
        }
        
        public RevitLevel_15a3720a_2792_5f89_963f_34869fd7ae10(): base("RevitLevel", "RevitLevel", "Creates a new Revit level unless one with the same elevation already exists", "Revit", "Architecture"){}
        
        internal static string internalCategory => "Speckle 2 Autogenerated";
        internal static Guid internalGuid => new Guid("15a3720a-2792-5f89-963f-34869fd7ae10");
        internal static GH_Exposure internalExposure => GH_Exposure.tertiary;

        public override GH_Exposure Exposure => internalExposure;
        public override Guid ComponentGuid => internalGuid;

        public override void AddedToDocument(GH_Document document){
          SelectedConstructor = CSOUtils.FindConstructor("Objects.BuiltElements.Revit.RevitLevel.ctor(System.String,System.Double,System.Boolean,System.Collections.Generic.List`1[Objects.BuiltElements.Revit.Parameter])", "Objects.BuiltElements.Revit.RevitLevel");
          base.AddedToDocument(document);
        }
    }

    public class RevitLevel_bb08cd04_6de9_dd6a_073a_322ca61d68c0: CreateSchemaObjectBase {
        
        static RevitLevel_bb08cd04_6de9_dd6a_073a_322ca61d68c0() {
          SpeckleGHSettings.SettingsChanged += (_, args) =>
          {
            if (!args.Key.StartsWith("Speckle2:tabs.")) return;
            var proxy = Grasshopper.Instances.ComponentServer.ObjectProxies.FirstOrDefault(p => p.Guid == internalGuid);
            if (proxy == null) return;
            proxy.Exposure = internalExposure;
          };
        }
        
        public RevitLevel_bb08cd04_6de9_dd6a_073a_322ca61d68c0(): base("RevitLevel by name", "RevitLevel by name", "Gets an existing Revit level by name", "Revit", "Architecture"){}
        
        internal static string internalCategory => "Speckle 2 Autogenerated";
        internal static Guid internalGuid => new Guid("bb08cd04-6de9-dd6a-073a-322ca61d68c0");
        internal static GH_Exposure internalExposure => GH_Exposure.tertiary;

        public override GH_Exposure Exposure => internalExposure;
        public override Guid ComponentGuid => internalGuid;

        public override void AddedToDocument(GH_Document document){
          SelectedConstructor = CSOUtils.FindConstructor("Objects.BuiltElements.Revit.RevitLevel.ctor(System.String)", "Objects.BuiltElements.Revit.RevitLevel");
          base.AddedToDocument(document);
        }
    }
    
    public class RevitLevel_15a3720a_2792_5f89_963f_34869fd7ae10UpgraderObject: IGH_UpgradeObject
    {
        public IGH_DocumentObject Upgrade(IGH_DocumentObject target, GH_Document document)
        {
          var component = target as IGH_Component;
          if (component == null)
            return null;

          var upgradedComponent = GH_UpgradeUtil.SwapComponents(component, UpgradeTo);
          UpgradeUtils.SwapGroups(document, component, upgradedComponent);
          return upgradedComponent;
        }

        public DateTime Version => new DateTime(2023, 3, 1);

        public Guid UpgradeFrom => new Guid("6866a600-0ea7-a8da-a9c7-5928de5eb755");
        public Guid UpgradeTo => new("15a3720a-2792-5f89-963f-34869fd7ae10");
    }


    public class RevitLevel_bb08cd04_6de9_dd6a_073a_322ca61d68c0UpgraderObject: IGH_UpgradeObject
    {
        public IGH_DocumentObject Upgrade(IGH_DocumentObject target, GH_Document document)
        {
          var component = target as IGH_Component;
          if (component == null)
            return null;

          var upgradedComponent = GH_UpgradeUtil.SwapComponents(component, UpgradeTo);
          UpgradeUtils.SwapGroups(document, component, upgradedComponent);
          return upgradedComponent;
        }

        public DateTime Version => new DateTime(2023, 3, 1);

        public Guid UpgradeFrom => new Guid("2542647d-f80e-cf24-3057-9b6d97bf3233");
        public Guid UpgradeTo => new("bb08cd04-6de9-dd6a-073a-322ca61d68c0");
    }

}
