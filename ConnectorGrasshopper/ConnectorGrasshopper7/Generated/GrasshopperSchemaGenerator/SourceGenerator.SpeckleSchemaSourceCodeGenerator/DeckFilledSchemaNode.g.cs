//<auto-generated/>
using System;
using System.Linq;
using Grasshopper.Kernel;
using ConnectorGrasshopperUtils;
using ConnectorGrasshopper;

namespace ConnectorGrasshopper.SchemaNodes.AutoGenerated {
    
    public class DeckFilled_5c3688d9_3436_4c12_03b5_c10231e7e192: CreateSchemaObjectBase {
        
        static DeckFilled_5c3688d9_3436_4c12_03b5_c10231e7e192() {
          SpeckleGHSettings.SettingsChanged += (_, args) =>
          {
            if (!args.Key.StartsWith("Speckle2:tabs.")) return;
            var proxy = Grasshopper.Instances.ComponentServer.ObjectProxies.FirstOrDefault(p => p.Guid == internalGuid);
            if (proxy == null) return;
            proxy.Exposure = internalExposure;
          };
        }
        
        public DeckFilled_5c3688d9_3436_4c12_03b5_c10231e7e192(): base("DeckFilled", "DeckFilled", "Create an CSI Filled Deck", "CSI", "Properties"){}
        
        internal static string internalCategory => "Speckle 2 Autogenerated";
        internal static Guid internalGuid => new Guid("5c3688d9-3436-4c12-03b5-c10231e7e192");
        internal static GH_Exposure internalExposure => GH_Exposure.tertiary;

        public override GH_Exposure Exposure => internalExposure;
        public override Guid ComponentGuid => internalGuid;

        public override void AddedToDocument(GH_Document document){
          SelectedConstructor = CSOUtils.FindConstructor("Objects.Structural.CSI.Properties.CSIProperty2D+DeckFilled.ctor(System.String,Objects.Structural.CSI.Analysis.ShellType,Objects.Structural.Materials.StructuralMaterial,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)", "Objects.Structural.CSI.Properties.CSIProperty2D+DeckFilled");
          base.AddedToDocument(document);
        }
    }
    
    public class DeckFilled_5c3688d9_3436_4c12_03b5_c10231e7e192UpgraderObject: IGH_UpgradeObject
    {
        public IGH_DocumentObject Upgrade(IGH_DocumentObject target, GH_Document document)
        {
          var component = target as IGH_Component;
          if (component == null)
            return null;

          var upgradedComponent = GH_UpgradeUtil.SwapComponents(component, UpgradeTo);
          UpgradeUtils.SwapGroups(document, component, upgradedComponent);
          return upgradedComponent;
        }

        public DateTime Version => new DateTime(2023, 3, 1);

        public Guid UpgradeFrom => new Guid("4ecdf5a8-6ff7-0804-e230-0cfb151113fd");
        public Guid UpgradeTo => new("5c3688d9-3436-4c12-03b5-c10231e7e192");
    }

}
