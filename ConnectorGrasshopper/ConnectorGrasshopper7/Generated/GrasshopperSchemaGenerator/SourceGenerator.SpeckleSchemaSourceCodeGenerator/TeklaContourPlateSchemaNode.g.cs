//<auto-generated/>
using System;
using System.Linq;
using Grasshopper.Kernel;
using ConnectorGrasshopperUtils;
using ConnectorGrasshopper;

namespace ConnectorGrasshopper.SchemaNodes.AutoGenerated {
    
    public class TeklaContourPlate_3e81f8bf_2eae_073a_73bf_694969d45a84: CreateSchemaObjectBase {
        
        static TeklaContourPlate_3e81f8bf_2eae_073a_73bf_694969d45a84() {
          SpeckleGHSettings.SettingsChanged += (_, args) =>
          {
            if (!args.Key.StartsWith("Speckle2:tabs.")) return;
            var proxy = Grasshopper.Instances.ComponentServer.ObjectProxies.FirstOrDefault(p => p.Guid == internalGuid);
            if (proxy == null) return;
            proxy.Exposure = internalExposure;
          };
        }
        
        public TeklaContourPlate_3e81f8bf_2eae_073a_73bf_694969d45a84(): base("ContourPlate", "ContourPlate", "Creates a TeklaStructures contour plate.", "Tekla", "Structure"){}
        
        internal static string internalCategory => "Speckle 2 Autogenerated";
        internal static Guid internalGuid => new Guid("3e81f8bf-2eae-073a-73bf-694969d45a84");
        internal static GH_Exposure internalExposure => GH_Exposure.tertiary;

        public override GH_Exposure Exposure => internalExposure;
        public override Guid ComponentGuid => internalGuid;

        public override void AddedToDocument(GH_Document document){
          SelectedConstructor = CSOUtils.FindConstructor("Objects.BuiltElements.TeklaStructures.TeklaContourPlate.ctor(Objects.Structural.Properties.Profiles.SectionProfile,Objects.Geometry.Polyline,System.String,System.String,System.String,Objects.Structural.Materials.StructuralMaterial,Objects.BuiltElements.TeklaStructures.TeklaPosition,Speckle.Core.Models.Base)", "Objects.BuiltElements.TeklaStructures.TeklaContourPlate");
          base.AddedToDocument(document);
        }
    }
    
    public class TeklaContourPlate_3e81f8bf_2eae_073a_73bf_694969d45a84UpgraderObject: IGH_UpgradeObject
    {
        public IGH_DocumentObject Upgrade(IGH_DocumentObject target, GH_Document document)
        {
          var component = target as IGH_Component;
          if (component == null)
            return null;

          var upgradedComponent = GH_UpgradeUtil.SwapComponents(component, UpgradeTo);
          UpgradeUtils.SwapGroups(document, component, upgradedComponent);
          return upgradedComponent;
        }

        public DateTime Version => new DateTime(2023, 3, 1);

        public Guid UpgradeFrom => new Guid("5a8b296a-f0c7-bed1-6c71-e87eee9971ed");
        public Guid UpgradeTo => new("3e81f8bf-2eae-073a-73bf-694969d45a84");
    }

}
